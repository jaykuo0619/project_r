filtered_data,
family = 'binomial')
summary(intercept_only)
total_true <- sum(filtered_data$binary)
p_true <- total_true / nrow(filtered_data)
odds_true <- p_true / (1 - p_true)
log_odds_true <- log(odds_true)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_QUal, Overall_Cond, Year_Builty, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Builty, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Overall_Qual <- ifelse(dt$Overall_Quad %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
model_1 <- glm(binary ~ Petal.Length,
filtered_data,
family = 'binomial')
summary(model_1)
B1 <- coef(model_1)['Petal.Length']
odds <- exp(B1)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Overall_Qual <- ifelse(dt$Overall_Quad %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Quad %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Quad %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
#`Garage_Cars`, `Gr_Liv_Area`, `Lot_Area` + `Lot_Frontage`
ggplot(data = dt_new, aes(x = Garage_Cars, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Gr_Liv_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Frontage, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
set.seed(11)
ind <- seq(1, 100)
train_ind <- sample(ind, 80)
train_data <- filtered_data [train_ind,]
test_data<- filtered_data[-train_ind, ]
train_data_2 <- createDataPartition(filtered_data$binary, p = 0.8)
ml_model_1 <- glm(binary ~ Sepal.Length,
train_data,
family = 'binomial')
?predict
preds <- predict(ml_model_1, train_data)
preds <- predict(ml_model_1,
train_data,
type = 'response')
accuracy <- confusionMatrix(factor(preds_binary),
factor(train_data$binary))
conf_matt <- confusionMatrix(factor(preds_binary) + factor(train_data$binary))
preds_binary <- preds >= 0.5
conf_matt <- confusionMatrix(factor(preds_binary) + factor(train_data$binary))
conf_matt <- confusionMatrix(factor(preds_binary), factor(train_data$binary))
View(conf_matt)
preds_test <- predict(ml_model_1,
test_data,
type = "response")
preds_test_binary <- preds_test >= 0.5
conf_mat_test <- confusionMatrix(factor(preds_test_binary),
factor(test_data$binary))
View(conf_matt)
View(conf_mat_test)
conf_mat_test
ml_model_2 <- glm(binary ~ Sepal.Length + Petal.Length,
train_data,
family = "binomial")
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~Garage_Caaars + Gr_Liv_Area + Lot_Area + Lot_Frontage, data = .)
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~Garage_Cars + Gr_Liv_Area + Lot_Area + Lot_Frontage, data = .)
summary(HW7Q1A2)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B)
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
nyc <- read.csv("./data/nyc.csv")
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
# predicted price
predict(HW7Q4A1, data.frame(Food = c(20, 25, 35)))
View(nyc)
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
predict(HW7Q4A1)
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
predict(HW7Q4A1, data.frame(Food = c(20, 25, 35)))
# keep in budget
nyc_new <- nyc %>%
filter(Price * 1.15 <= 100)
# predict the price with three restaurant suggestions
HW7Q4A2 <- nyc_new %>%
lm(Price ~ Food + Decor + Service + East, data = .)
summary(HW7Q4A2)
# save the predicted values
nyc_new$PriceHat <- predict(HW7Q4A2)
# show the final choice
nyc_new %>%
filter(PriceHat == max(PriceHat))
HW7Q4B1 <- nyc %>%
lm(Price ~ Food + Service, data = .)
summary(HW7Q4B1)
HW7Q4B2 <- nyc %>%
lm(Price ~ Food + Service + Decor, data = .)
summary(HW7Q4B2)
library(openintro)
data(mariokart)
# structure
str(mariokart)
# summary statistics
summary(mariokart)
# check missing
is.na(mariokart) %>%
apply(2, sum)
HW7Q52 <- mariokart %>%
lm(I(total_pr - ship_pr) ~ duration, data = .)
summary(HW7Q52)
#cor(mariokart[, -c(1, 4, 8, 10, 12)])
HW7Q53 <- mariokart %>%
lm(I(total_pr - ship_pr) ~ duration + n_bids + seller_rate + wheels, data = .)
summary(HW7Q53)
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B)
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
#`Garage_Cars`, `Gr_Liv_Area`, `Lot_Area` + `Lot_Frontage`
ggplot(data = dt_new, aes(x = Garage_Cars, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Gr_Liv_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Frontage, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~Garage_Cars + Gr_Liv_Area + Lot_Area + Lot_Frontage, data = .)
summary(HW7Q1A2)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B)
#cor(mariokart[, -c(1, 4, 8, 10, 12)])
\footnotesize
#cor(mariokart[, -c(1, 4, 8, 10, 12)])
HW7Q53 <- mariokart %>%
lm(I(total_pr - ship_pr) ~ duration + n_bids + seller_rate + wheels, data = .)
\footnotesize summary(HW7Q53)
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
library(magrittr)
# import the data set
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>% #subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# Assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
# Assign `Overall_Qual = 1` if Overall_Qual > Average
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# Assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# Assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
# Assign `Year_Sold = 1` if Year_Sold >= 2008
dt_new$Year_Sold <- ifelse(dt$Year_Sold >= 2008, 1, 0)
#`Garage_Cars`, `Gr_Liv_Area`, `Lot_Area` + `Lot_Frontage`
ggplot(data = dt_new, aes(x = Garage_Cars, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Gr_Liv_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Frontage, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~ Garage_Cars + Gr_Liv_Area + Lot_Area + Lot_Frontage,
data = .)
summary(HW7Q1A2)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B,
coefs = c("Garage_Cars", "Gr_Liv_Area", "Lot_Area", "Lot_Frontage"))
nyc <- read.csv("./data/nyc.csv")
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
# predicted price
predict(HW7Q4A1, data.frame(Food = c(20, 25, 35)))
# keep in budget
nyc_new <- nyc %>%
filter(Price * 1.15 <= 100)
# predict the price with three restaurant suggestions
HW7Q4A2 <- nyc_new %>%
lm(Price ~ Food + Decor + Service + East, data = .)
summary(HW7Q4A2)
# save the predicted values
nyc_new$PriceHat <- predict(HW7Q4A2)
# show the final choice
nyc_new %>%
filter(PriceHat == max(PriceHat))
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
library(magrittr)
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>%
# subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_excellent"), 1, 0)
# assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
#`Garage_Cars`, `Gr_Liv_Area`, `Lot_Area` + `Lot_Frontage`
ggplot(data = dt_new, aes(x = Garage_Cars, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Gr_Liv_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Frontage, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~Garage_Cars + Gr_Liv_Area + Lot_Area + Lot_Frontage, data = .)
summary(HW7Q1A2)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B)
nyc <- read.csv("/Users/Jay/Desktop/nyc.csv")
HW7Q4A1 <- nyc %>%
lm(Price ~ Food, data = .)
summary(HW7Q4A1)
# predicted price
predict(HW7Q4A1, data.frame(Food = c(20, 25, 35)))
# keep in budget
nyc_new <- nyc %>%
filter(Price * 1.15 <= 100)
# predict the price with three restaurant suggestions
HW7Q4A2 <- nyc_new %>%
lm(Price ~ Food + Decor + Service + East, data = .)
summary(HW7Q4A2)
# save the predicted values
nyc_new$PriceHat <- predict(HW7Q4A2)
# show the final choice
nyc_new %>%
filter(PriceHat == max(PriceHat))
HW7Q4B1 <- nyc %>%
lm(Price ~ Food + Service, data = .)
summary(HW7Q4B1)
HW7Q4B2 <- nyc %>%
lm(Price ~ Food + Service + Decor, data = .)
summary(HW7Q4B2)
library(openintro)
data(mariokart)
# structure
str(mariokart)
# summary statistics
summary(mariokart)
# check missing
is.na(mariokart) %>%
apply(2, sum)
HW7Q52 <- mariokart %>%
lm(I(total_pr - ship_pr) ~ duration, data = .)
summary(HW7Q52)
#cor(mariokart[, -c(1, 4, 8, 10, 12)])
HW7Q53 <- mariokart %>%
lm(I(total_pr - ship_pr) ~ duration + n_bids + seller_rate + wheels, data = .)
summary(HW7Q53)
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
# Load standard libraries
library(tidyverse)
library(dplyr)
library(MASS) # Modern applied statistics functions
library(magrittr)
# import the data set
library(AmesHousing)
dt <- make_ames()
dt %<>%
filter(Sale_Condition == "Normal") %>% #subset(Sale_Condition == "Normal")
dplyr::select(Lot_Frontage, Lot_Area, Bldg_Type, Overall_Qual, Overall_Cond, Year_Built, Gr_Liv_Area, TotRms_AbvGrd, Fireplaces, Garage_Cars, Garage_Area, Wood_Deck_SF, Total_Bsmt_SF, Full_Bath, Half_Bath, Year_Sold, Sale_Price)
# adjust some variables
dt_new <- dt
# Assign `Bldg_Type = 1` if Bldg_Type == "OneFam"
dt_new$Bldg_Type <- ifelse(dt$Bldg_Type == "OneFam", 1, 0)
# Assign `Overall_Qual = 1` if Overall_Qual > Average
dt_new$Overall_Qual <- ifelse(dt$Overall_Qual %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# Assign `Overall_Cond = 1` if Overall_Cond > Average
dt_new$Overall_Cond <- ifelse(dt$Overall_Cond %in% c("Above_Average", "Good", "Very_Good", "Excellent", "Very_Excellent"), 1, 0)
# Assign `Year_Built = 1` if Year_Built >= 1971
dt_new$Year_Built <- ifelse(dt$Year_Built >= 1971, 1, 0)
# Assign `Year_Sold = 1` if Year_Sold >= 2008
dt_new$Year_Sold <- ifelse(dt$Year_Sold >= 2008, 1, 0)
#`Garage_Cars`, `Gr_Liv_Area`, `Lot_Area` + `Lot_Frontage`
ggplot(data = dt_new, aes(x = Garage_Cars, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Gr_Liv_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Area, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
ggplot(data = dt_new, aes(x = Lot_Frontage, y = Sale_Price)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
HW7Q1A2 <- dt_new %>%
lm(Sale_Price ~ Garage_Cars + Gr_Liv_Area + Lot_Area + Lot_Frontage,
data = .)
summary(HW7Q1A2)
library(jtools); library(huxtable)
y <- c("Sale_Price")
controls <- colnames(dt)[-17]
HW6Q1B <- dt_new %>%
lm(formula = as.formula(paste(y, paste(c(controls), collapse = " + "), sep = " ~ ")), data = .)
export_summs(HW7Q1A2, HW6Q1B,
coefs = c("Garage_Cars", "Gr_Liv_Area", "Lot_Area", "Lot_Frontage"))
View(dt_new)
